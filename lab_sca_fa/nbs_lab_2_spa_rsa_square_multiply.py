import matplotlib.pyplot as plt
import numpy as np
from matplotlib.widgets import TextBox
import time

# "SQUARE" trace
square_trace = [93,94,90,87,84,85,87,90,86,90,92,114,146,154,158,156,148,140,129,117,104,103,107,109,109,107,105,102,103,99,97,99,121,165,181,181,172,160,146,128,106,87,83,85,80,79,78,80,84,89,88,95,102,138,180,189,187,178,168,154,134,110,94,92,92,86,83,83,82,87,87,89,92,104,125,144,152,153,147,144,137,126,117,110,115,115,113,111,108,105,107,103,101,103,110,135,148,149,146,140,132,125,110,106,99,110,110,109,105,105,104,105,104,103,103,119,162,152,166,178,154,129,130,119,112,116,116,112,117,104,108,69,102,95,87,92,105,125,143,144,133,134,131,131,68,105,99,126,142,127,119,123,116,109,103,96,98,119,138,142,141,136,131,125,117,105,104,107,112,112,110,107,106,105,106,104,104,110,137,161,166,162,153,143,134,121,104,95,97,102,97,94,93,95,96,95,96,99,105,131,147,153,151,145,141,131,121,109,103,108,111,110,108,107,103,105,104,100,102,111,141,154,158,153,147,138,127,114,104,98,106,105,106,102,103,101,104,102,101,103,118,161,148,161,177,154,130,131,119,112,112,113,109,115,106,110,73,105,99,91,93,106,119,137,137,153,87,120,109,123,132,130,119,132,126,121,116,106,103,101,99,101,117,133,139,141,135,131,129,119,113,106,109,116,112,111,110,111,110,112,107,109,111,131,145,149,146,140,134,129,118,108,101,105,110,106,104,102,104,105,104,103,103,108,136,143,135,163,155,126,126,127,115,113,120,108,117,111,117,85,101,116,99,60,100,122,126,145,144,146,140,142,108,114,108,107,107,111,97,104,106,110,109,110,111,123,137,140,139,134,133,127,124,117,113,111,118,117,117,111,111,109,113,108,108,110,121,137,141,140,135,129,126,120,111,104,106,110,110,110,107,105,107,108,106,105,109,127,160,137,155,162,134,119,129,117,114,116,115,112,113,104,117,33,102,93,111,97,136,149,160,165,138,128,130,112,97,102,95,101,103,104,101,106,109,110,110,111,114,133,143,146,142,137,134,130,120,112,108,113,115,110,108,107,106,109,107,106,105,115,139,149,148,145,138,130,126,115,103,99,107,105,104,100,99,100,105,103,104,106,118,158,185,188,180,172,157,141,123,100,86,83,78,76,73,74,77,86,89,94,99,121,187,182,196,207,183,151,150,127,111,108,95,92,89,84,84,53,90,104,38,86,95,136,136,156,148,151,156,127,116,113,105,103,107,99,98,101,104,105,105,108,112,136,167,179,175,166,157,146,130,110,96,93,91,88,84,82,87,92,93,97,99,107,136,167,172,172,163,155,145,130,113,99,96,95,90,86,88,89,93,94,97,99,108,135,149,151,148,143,138,134,123,112,105,110,109,105,102,102,103,104,104,103,104,116,170,181,194,209,186,156,147,125,106,92,88,75,82,73,83,51,85,87,80,87,107,145,175,182,170,166,158,143,123,127,62,85,78,90,106,111,86,110,101,100,100,113,125,139,137,134,134,132,125,120,111,111,117,115,113,111,111,111,114,110,107,108,131,167,178,177,169,157,147,129,108,91,86,84,80,77,77,81,86,91,92,95,103,135,168,177,176,167,159,150,132,109,95,92,92,87,85,86,86,92,94,95,97,106,139,144,143,173,164,135,136,129,118,118,121,114,120,115,119,87,104,112,93,108,62,114,142,179,147,166,162,148,142,110,88,97,88,80,82,82,83,94,94,94,100,116,157,174,180,174,166,156,141,121,104,95,98,91,91,92,94,93,96,95,95,96,112,133,143,146,146,143,138,128,117,108,106,111,109,108,108,109,107,107,101,102,104,124,142,149,151,145,140,134,119,108,97,100,104,104,104,104,105,107,107,101,101,106,139,155,153,182,176,144,139,131,110,104,110,103,111,109,113,83,97,108,87,84,111,68,136,137,159,142,156,146,135,128,101,102,111,103,93,99,96,99,96,95,97,110,134,146,148,149,145,139,132,119,109,105,113,114,111,112,113,112,109,104,101,102,120,145,154,154,151,144,136,123,107,96,95,101,102,103,104,105,104,103,99,96,99,122,143,151,153,147,141,133,121,108,99,102,108,107,106,106,107,107,106,102,101,107,136,153,142,169,167,135,130,130,111,109,116,109,113,114,115,90,96,112,91,92,105,111,129,141,135,142,91,115,108,123,133,122,124,129,123,117,114,103,100,97,98,108,130,137,140,141,135,129,123,116,107,107,113,115,118,116,114,112,110,109,105,103,122,141,146,146,143,138,131,122,111,102]

# "MULTIPLY" trace
multiply_trace = [126,123,125,124,123,120,128,156,170,172,172,166,160,153,136,122,116,126,127,125,123,124,122,119,119,113,117,131,161,172,171,167,166,154,145,130,119,112,126,123,125,123,119,123,122,119,118,117,133,193,162,187,209,170,143,153,133,128,129,129,124,133,118,125,74,126,116,101,111,120,143,160,160,152,182,90,139,112,131,155,155,134,152,135,131,129,114,104,110,110,137,153,155,155,154,150,146,139,127,123,129,140,137,137,136,133,132,130,122,119,126,143,156,155,154,152,144,140,132,123,114,124,134,129,133,133,129,130,128,123,119,127,151,157,159,158,153,148,141,129,121,115,131,133,130,129,130,128,128,128,120,117,133,160,162,163,164,157,150,140,132,122,115,132,131,134,129,128,129,126,124,117,120,139,161,165,161,165,153,150,139,127,118,118,127,129,131,131,129,127,127,124,117,120,145,182,148,176,187,152,135,151,132,129,132,134,132,137,129,114,100,66,116,97,133,132,170,185,180,178,150,140,128,115,100,112,118,123,125,128,127,129,129,126,124,129,154,160,163,161,156,148,143,136,125,120,132,138,136,135,136,131,131,125,122,119,129,152,153,156,156,149,145,140,128,119,113,129,133,132,128,128,130,124,125,121,117,131,156,162,160,158,153,146,139,127,121,118,133,133,134,132,131,129,127,124,120,120,144,169,174,171,171,160,157,141,128,117,116,127,126,129,128,126,122,123,120,116,119,143,164,167,167,163,152,149,137,126,116,118,129,127,126,127,124,125,125,114,120,120,149,166,172,170,165,157,148,135,123,117,122,131,128,139,104,92,111,120,147,159,126,171,170,169,163,155,132,133,122,112,105,121,126,129,130,131,130,132,129,127,123,133,181,168,177,211,187,145,151,135,123,129,132,126,139,124,136,81,118,113,98,103,115,133,149,156,145,146,145,136,127,127,121,136,139,137,137,137,159,85,117,106,127,174,196,164,187,170,158,148,129,105,108,104,121,121,125,125,128,124,123,125,119,125,148,161,166,164,160,154,148,137,128,120,126,136,132,131,132,129,127,123,119,117,124,160,173,152,189,189,146,143,145,125,127,133,122,133,133,135,94,108,129,104,104,119,123,143,154,151,147,161,79,126,116,137,177,153,149,153,143,135,131,115,112,113,124,145,148,150,150,149,143,139,130,128,125,140,141,141,139,136,134,132,128,121,122,139,157,159,158,156,150,143,132,122,117,117,133,133,132,129,129,126,126,121,116,118,140,161,163,163,161,154,147,135,124,116,117,129,128,130,127,126,126,124,122,119,119,151,172,177,172,170,159,152,139,124,112,118,124,125,120,123,122,123,121,118,121,121,149,167,167,165,164,155,146,135,124,116,127,139,133,132,128,126,124,121,120,116,123,152,163,164,162,157,148,144,133,120,113,127,129,130,127,129,127,126,122,120,119,132,165,173,174,172,165,155,145,130,119,111,126,123,124,122,120,117,120,119,118,116,137,191,161,180,205,171,135,150,131,136,130,138,129,142,130,130,76,124,113,103,109,118,134,144,146,139,140,142,156,69,118,112,155,176,167,145,159,146,134,126,112,110,133,144,144,144,141,139,138,129,122,122,129,143,139,141,139,135,135,131,127,126,127,157,172,169,169,162,151,143,128,117,111,119,126,125,124,125,121,124,118,117,118,124,147,153,155,155,150,146,139,131,125,119,134,134,135,134,133,132,132,129,124,121,132,159,166,162,162,157,147,142,131,121,115,130,129,131,126,126,126,125,125,123,122,141,177,187,185,181,171,159,147,127,111,106,120,113,114,111,111,112,114,112,114,114,140,193,159,185,205,165,145,156,140,132,131,133,129,135,124,119,95,66,108,89,131,117,170,184,182,185,159,143,135,119,103,107,115,113,116,118,120,123,125,124,125,132,158,171,173,170,165,156,153,138,125,120,129,135,134,130,127,126,124,122,118,116,126,149,161,162,157,151,146,141,132,122,115,127,130,126,124,125,124,126,119,119,119,131,151,155,153,153,149,143,139,129,122,122,133,136,136,135,131,130,130,129,124,124,141,160,167,163,161,154,147,136,126,121,118,134,132,129,128,131,126,128,119,124,119,144,161,165,164,162,152,150,138,125,117,120,132,130,130,128,126,125,124,123,118,120,152,178,146,177,189,147,136,154,131,127,140,137,136,89,126,117,95,149,138,133,139,156,134,157,150,134,131,130,108,111,112,120,134,135,134,137,134,133,134,129,129,137,156,164,168,163,160,151,142,134,123,115,125,129,130,125]

def gen_traces(key_bits, n_bit, mode = 'sq'):
    
    if mode == 'sq': # square and multiply
    
        bin_data = bin(key_bits)[2:].zfill(n_bit)

        trace = []
        for i in range(n_bit):
            trace = trace + square_trace
            if bin_data[i] == '1':
                trace = trace + multiply_trace

        return trace
        
    elif mode == 'sqd': # square and multiply with random delay
        
        bin_data = bin(key_bits)[2:].zfill(n_bit)
        
        trace = []
        for i in range(n_bit):
            idx_start = np.random.randint(50)
            idx_end = np.random.randint(50)
            trace = trace + square_trace[idx_start:-1*(idx_end)]
            if bin_data[i] == '1':
                idx_start = np.random.randint(50)
                idx_end = np.random.randint(50)
                trace = trace + multiply_trace[idx_start:-1*(idx_end)]
        return trace
        
    elif mode == 'sqn': # square and multiply with random noise
    
        bin_data = bin(key_bits)[2:].zfill(n_bit)

        trace = []
        for i in range(n_bit):
            trace = trace + square_trace
            if bin_data[i] == '1':
                trace = trace + multiply_trace

    
        t = list(np.random.normal(0, 10, len(trace)))
        from operator import add
        return list( map(add, trace, t))
        
    
    elif mode == 'asq': # always square and multiply
        
        bin_data = bin(key_bits)[2:].zfill(n_bit)
        
        trace = []
        
        for i in range(n_bit):
            trace = trace + square_trace
            trace = trace + multiply_trace

        return trace

def checkHex(s):
    
    global n_bits
    
    
    if len(s)!=int((n_bits/4)):
        return 0
   
    for ch in s:
        if ((ch < '0' or ch > '9') and (ch < 'A' or ch > 'F') and (ch < 'a' or ch > 'f')):         
            return -1
         
    return 1
    
def submit(text):
    
    checker = checkHex(text)
    global key_bits
    
    if checker==1:
        
        hex_val = int('0x'+text,16)
        if hex_val == key_bits:
            plt.title("Correct prediction!")
            plt.show(block=False)
            plt.pause(2)
            plt.close()
            
        else:
            plt.title("Incorrect prediction! Try again...")
            plt.draw()
        
    elif checker == 0:
        plt.title("Incorrect Length")
        plt.draw()
        
    else:
        plt.title("Invalid Hex Values")
        plt.draw()

if __name__ == "__main__":
    
    for rep in range(4):
        if rep <2:
            n_bits = 8
        else:
            n_bits = 16
        key_bits = np.random.randint(2**n_bits)
        trace = gen_traces(key_bits, n_bits, 'sq') 
        fig, ax = plt.subplots()
        plt.subplots_adjust(bottom=0.3)
        initial_text = ""
        l, = plt.plot(trace,color='blue')
    
        axbox = plt.axes([0.1, 0.05, 0.8, 0.075])
        text_box = TextBox(axbox, 'Verify!', initial=initial_text)
        text_box.on_submit(submit)

        plt.show()
